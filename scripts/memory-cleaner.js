// Memory Cleaner & Performance Optimizer
import { exec } from 'child_process';
import { promisify } from 'util';
import fs from 'fs-extra';
import os from 'os';

const execAsync = promisify(exec);

class MemoryCleaner {
  constructor() {
    this.isRunning = false;
    this.cleanupInterval = null;
    this.memoryThreshold = 80; // –ü—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
    this.autoCleanInterval = 300000; // 5 –º–∏–Ω—É—Ç –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞
    this.stats = {
      cleanups: 0,
      memoryFreed: 0,
      lastCleanup: null
    };
  }

  async init() {
    console.log('üßπ Memory Cleaner –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    await this.showSystemInfo();
  }

  async showSystemInfo() {
    try {
      const totalMemory = Math.round(os.totalmem() / 1024 / 1024 / 1024);
      const freeMemory = Math.round(os.freemem() / 1024 / 1024 / 1024);
      const usedMemory = totalMemory - freeMemory;
      const usagePercent = Math.round((usedMemory / totalMemory) * 100);

      console.log('\nüíæ –°–ò–°–¢–ï–ú–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:');
      console.log('========================');
      console.log(`–û–±—â–∞—è –ø–∞–º—è—Ç—å: ${totalMemory} GB`);
      console.log(`–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: ${usedMemory} GB (${usagePercent}%)`);
      console.log(`–°–≤–æ–±–æ–¥–Ω–æ: ${freeMemory} GB`);
      
      if (usagePercent > 80) {
        console.log('‚ö†Ô∏è –í–´–°–û–ö–û–ï –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï –ü–ê–ú–Ø–¢–ò!');
        console.log('üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—á–∏—Å—Ç–∫–∞');
      } else if (usagePercent > 60) {
        console.log('üü° –£–º–µ—Ä–µ–Ω–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏');
      } else {
        console.log('üü¢ –ü–∞–º—è—Ç—å –≤ –Ω–æ—Ä–º–µ');
      }

    } catch (error) {
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–º—è—Ç–∏');
    }
  }

  async cleanMemory() {
    console.log('\nüßπ –û–ß–ò–°–¢–ö–ê –ü–ê–ú–Ø–¢–ò...');
    console.log('====================');

    const beforeMemory = this.getMemoryUsage();
    let cleaned = [];

    try {
      // 1. –û—á–∏—Å—Ç–∫–∞ Node.js –∫—ç—à–∞
      await this.clearNodeCache();
      cleaned.push('Node.js –∫—ç—à');

      // 2. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞
      await this.forceGarbageCollection();
      cleaned.push('–°–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞');

      // 3. –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
      await this.clearTempFiles();
      cleaned.push('–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã');

      // 4. –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ npm
      await this.clearNpmCache();
      cleaned.push('NPM –∫—ç—à');

      // 5. –û—á–∏—Å—Ç–∫–∞ Windows –∫—ç—à–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
      await this.clearWindowsCache();
      cleaned.push('Windows –∫—ç—à');

      // 6. –û—á–∏—Å—Ç–∫–∞ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ –∫—ç—à–∞ –¥–ª—è Browser-Sync
      await this.clearBrowserCache();
      cleaned.push('Browser –∫—ç—à');

      const afterMemory = this.getMemoryUsage();
      const memoryFreed = beforeMemory - afterMemory;

      this.stats.cleanups++;
      this.stats.memoryFreed += memoryFreed;
      this.stats.lastCleanup = new Date();

      console.log('\n‚úÖ –û–ß–ò–°–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê:');
      console.log(`üìä –û—á–∏—â–µ–Ω–æ: ${cleaned.join(', ')}`);
      console.log(`üíæ –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –ø–∞–º—è—Ç–∏: ${memoryFreed.toFixed(1)} MB`);
      console.log(`üîÑ –í—Å–µ–≥–æ –æ—á–∏—Å—Ç–æ–∫: ${this.stats.cleanups}`);

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏:', error.message);
    }
  }

  async clearNodeCache() {
    try {
      // –û—á–∏—â–∞–µ–º require cache
      Object.keys(require.cache).forEach(key => {
        if (!key.includes('node_modules')) {
          delete require.cache[key];
        }
      });
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
      if (global.gc) {
        global.gc();
      }
      
      console.log('‚úÖ Node.js –∫—ç—à –æ—á–∏—â–µ–Ω');
    } catch (error) {
      console.warn('‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ Node.js –∫—ç—à–∞');
    }
  }

  async forceGarbageCollection() {
    try {
      if (global.gc) {
        global.gc();
        console.log('‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
      } else {
        console.log('‚ö†Ô∏è –°–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å --expose-gc)');
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ –º—É—Å–æ—Ä–∞');
    }
  }

  async clearTempFiles() {
    try {
      const tempPaths = [
        '.cache',
        'node_modules/.cache',
        'assets/temp',
        '*.tmp',
        '*.temp'
      ];

      for (const tempPath of tempPaths) {
        try {
          if (await fs.pathExists(tempPath)) {
            await fs.remove(tempPath);
          }
        } catch {}
      }
      
      console.log('‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã');
    } catch (error) {
      console.warn('‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤');
    }
  }

  async clearNpmCache() {
    try {
      await execAsync('npm cache clean --force', { timeout: 10000 });
      console.log('‚úÖ NPM –∫—ç—à –æ—á–∏—â–µ–Ω');
    } catch (error) {
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å NPM –∫—ç—à');
    }
  }

  async clearWindowsCache() {
    try {
      // –û—á–∏—Å—Ç–∫–∞ DNS –∫—ç—à–∞
      await execAsync('ipconfig /flushdns', { timeout: 5000 });
      
      // –û—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∫—ç—à–∞
      await execAsync('cleanmgr /sagerun:1', { timeout: 5000 }).catch(() => {});
      
      console.log('‚úÖ Windows –∫—ç—à –æ—á–∏—â–µ–Ω');
    } catch (error) {
      console.warn('‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ Windows –∫—ç—à–∞');
    }
  }

  async clearBrowserCache() {
    try {
      // –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ Browser-Sync
      const browserSyncCache = '.browsersyncrc';
      if (await fs.pathExists(browserSyncCache)) {
        await fs.remove(browserSyncCache);
      }
      console.log('‚úÖ Browser –∫—ç—à –æ—á–∏—â–µ–Ω');
    } catch (error) {
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å browser –∫—ç—à');
    }
  }

  getMemoryUsage() {
    const used = process.memoryUsage();
    return Math.round(used.heapUsed / 1024 / 1024 * 100) / 100; // MB
  }

  async startAutoCleanup() {
    if (this.isRunning) {
      console.log('‚ö†Ô∏è –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞');
      return;
    }

    this.isRunning = true;
    console.log(`ü§ñ –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –∑–∞–ø—É—â–µ–Ω–∞ (–∫–∞–∂–¥—ã–µ ${this.autoCleanInterval / 1000 / 60} –º–∏–Ω)`);

    this.cleanupInterval = setInterval(async () => {
      const memoryUsage = this.getSystemMemoryUsage();
      
      if (memoryUsage > this.memoryThreshold) {
        console.log(`\n‚ö†Ô∏è –ü–∞–º—è—Ç—å: ${memoryUsage}% - –∑–∞–ø—É—Å–∫ –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∏...`);
        await this.cleanMemory();
      } else {
        console.log(`üü¢ –ü–∞–º—è—Ç—å –≤ –Ω–æ—Ä–º–µ: ${memoryUsage}%`);
      }
    }, this.autoCleanInterval);
  }

  async stopAutoCleanup() {
    if (this.cleanupInterval) {
      clearInterval(this.cleanupInterval);
      this.cleanupInterval = null;
      this.isRunning = false;
      console.log('üõë –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
    }
  }

  getSystemMemoryUsage() {
    try {
      const totalMemory = os.totalmem();
      const freeMemory = os.freemem();
      const usedMemory = totalMemory - freeMemory;
      return Math.round((usedMemory / totalMemory) * 100);
    } catch {
      return 0;
    }
  }

  async optimizeForDevelopment() {
    console.log('\n‚ö° –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –î–õ–Ø –†–ê–ó–†–ê–ë–û–¢–ö–ò...');
    console.log('================================');

    try {
      // 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Node.js
      process.env.NODE_OPTIONS = '--max-old-space-size=4096 --expose-gc';
      
      // 2. –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è Vite
      process.env.VITE_NODE_OPTIONS = '--max-old-space-size=4096';
      
      // 3. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gulp –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
      process.env.GULP_PARALLEL_LIMIT = '2';
      
      console.log('‚úÖ Node.js –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏');
      console.log('‚úÖ –£–≤–µ–ª–∏—á–µ–Ω –ª–∏–º–∏—Ç –ø–∞–º—è—Ç–∏ –¥–æ 4GB');
      console.log('‚úÖ –í–∫–ª—é—á–µ–Ω–∞ —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞');
      
    } catch (error) {
      console.warn('‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è');
    }
  }

  async showStats() {
    console.log('\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–ß–ò–°–¢–ö–ò:');
    console.log('======================');
    console.log(`üîÑ –í—Å–µ–≥–æ –æ—á–∏—Å—Ç–æ–∫: ${this.stats.cleanups}`);
    console.log(`üíæ –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –ø–∞–º—è—Ç–∏: ${this.stats.memoryFreed.toFixed(1)} MB`);
    console.log(`‚è∞ –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—á–∏—Å—Ç–∫–∞: ${this.stats.lastCleanup ? this.stats.lastCleanup.toLocaleString('ru-RU') : '–ù–µ –≤—ã–ø–æ–ª–Ω—è–ª–∞—Å—å'}`);
    console.log(`ü§ñ –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞: ${this.isRunning ? 'üü¢ –ê–∫—Ç–∏–≤–Ω–∞' : 'üî¥ –û—Ç–∫–ª—é—á–µ–Ω–∞'}`);
  }

  async emergencyCleanup() {
    console.log('üö® –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –ü–ê–ú–Ø–¢–ò!');
    console.log('==============================');
    
    try {
      // –£–±–∏–≤–∞–µ–º —Ç—è–∂—ë–ª—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
      await execAsync('taskkill /f /im node.exe /t').catch(() => {});
      await execAsync('taskkill /f /im chrome.exe /t').catch(() => {});
      
      console.log('‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏');
    }
  }
}

// –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä
const memoryCleaner = new MemoryCleaner();

// CLI –∫–æ–º–∞–Ω–¥—ã
if (process.argv[2]) {
  const command = process.argv[2];
  
  switch (command) {
    case 'clean':
      memoryCleaner.init().then(() => memoryCleaner.cleanMemory());
      break;
      
    case 'auto':
      memoryCleaner.init().then(() => memoryCleaner.startAutoCleanup());
      break;
      
    case 'stop':
      memoryCleaner.stopAutoCleanup();
      break;
      
    case 'info':
      memoryCleaner.showSystemInfo();
      break;
      
    case 'stats':
      memoryCleaner.showStats();
      break;
      
    case 'optimize':
      memoryCleaner.optimizeForDevelopment();
      break;
      
    case 'emergency':
      memoryCleaner.emergencyCleanup();
      break;
      
    default:
      console.log(`
üßπ MEMORY CLEANER & OPTIMIZER
=============================

–ö–æ–º–∞–Ω–¥—ã:
  clean       –û—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å —Å–µ–π—á–∞—Å
  auto        –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫—É (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω)
  stop        –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫—É
  info        –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ
  stats       –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–∏—Å—Ç–æ–∫
  optimize    –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
  emergency   –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ (—É–±–∏–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å—ã)

–ü—Ä–∏–º–µ—Ä—ã:
  node scripts/memory-cleaner.js clean
  node scripts/memory-cleaner.js auto
  node scripts/memory-cleaner.js info
      `);
  }
}

export default memoryCleaner; 