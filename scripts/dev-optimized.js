// Optimized Development Mode with Memory Management
import { spawn } from 'child_process';
import memoryCleaner from './memory-cleaner.js';

class OptimizedDev {
  constructor() {
    this.processes = [];
    this.isRunning = false;
  }

  async start() {
    console.log(`
‚ö° –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –†–ê–ó–†–ê–ë–û–¢–ö–ê
==============================

üßπ –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏: –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
üöÄ –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞: Vite + Gulp + Git –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è
üíæ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å + –ø–∞–º—è—Ç—å
    `);

    try {
      // 1. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
      await this.optimizeSystem();
      
      // 2. –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏
      await this.startMemoryManagement();
      
      // 3. –ó–∞–ø—É—Å–∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
      await this.startDevelopment();
      
      // 4. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
      this.setupSignalHandlers();
      
      this.isRunning = true;
      console.log('\n‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!');
      console.log('üí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', error.message);
      await this.cleanup();
    }
  }

  async optimizeSystem() {
    console.log('‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã...');
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    process.env.NODE_OPTIONS = '--max-old-space-size=4096 --expose-gc';
    process.env.VITE_NODE_OPTIONS = '--max-old-space-size=4096';
    process.env.UV_THREADPOOL_SIZE = '128';
    
    console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
  }

  async startMemoryManagement() {
    console.log('üßπ –ó–∞–ø—É—Å–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–º—è—Ç—å—é...');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫—É
    await memoryCleaner.init();
    await memoryCleaner.startAutoCleanup();
    
    console.log('‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç—å—é –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ');
  }

  async startDevelopment() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...');
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
    const processes = [
      {
        name: 'Vite Dev Server',
        command: 'npm',
        args: ['run', 'vite-only'],
        color: '\x1b[36m' // Cyan
      },
      {
        name: 'Gulp Automation',
        command: 'npm',
        args: ['run', 'gulp'],
        color: '\x1b[33m' // Yellow
      },
      {
        name: 'Git Auto-commits',
        command: 'npm',
        args: ['run', 'git:watch'],
        color: '\x1b[32m' // Green
      }
    ];

    for (const processConfig of processes) {
      await this.spawnProcess(processConfig);
    }
    
    console.log('‚úÖ –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—É—â–µ–Ω—ã');
  }

  async spawnProcess(config) {
    return new Promise((resolve) => {
      const childProcess = spawn(config.command, config.args, {
        stdio: 'pipe',
        shell: true,
        env: { ...process.env }
      });

      childProcess.stdout.on('data', (data) => {
        const output = data.toString().trim();
        if (output) {
          console.log(`${config.color}[${config.name}]\x1b[0m ${output}`);
        }
      });

      childProcess.stderr.on('data', (data) => {
        const output = data.toString().trim();
        if (output && !output.includes('ExperimentalWarning')) {
          console.log(`${config.color}[${config.name}]\x1b[0m ‚ö†Ô∏è ${output}`);
        }
      });

      childProcess.on('close', (code) => {
        console.log(`${config.color}[${config.name}]\x1b[0m –∑–∞–≤–µ—Ä—à—ë–Ω —Å –∫–æ–¥–æ–º ${code}`);
      });

      this.processes.push({
        name: config.name,
        process: childProcess
      });

      // –î–∞—ë–º –ø—Ä–æ—Ü–µ—Å—Å—É –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫
      setTimeout(resolve, 1000);
    });
  }

  setupSignalHandlers() {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ Ctrl+C
    process.on('SIGINT', async () => {
      console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...');
      await this.cleanup();
      process.exit(0);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
    process.on('SIGTERM', async () => {
      console.log('\nüõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
      await this.cleanup();
      process.exit(0);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    process.on('uncaughtException', async (error) => {
      console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
      await this.cleanup();
      process.exit(1);
    });
  }

  async cleanup() {
    if (!this.isRunning) return;
    
    console.log('\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...');
    
    try {
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫—É –ø–∞–º—è—Ç–∏
      await memoryCleaner.stopAutoCleanup();
      
      // –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
      for (const processInfo of this.processes) {
        try {
          console.log(`üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ ${processInfo.name}...`);
          processInfo.process.kill('SIGTERM');
        } catch (error) {
          console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ ${processInfo.name}:`, error.message);
        }
      }
      
      // –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏
      await memoryCleaner.cleanMemory();
      
      console.log('‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏:', error.message);
    }
    
    this.isRunning = false;
  }

  async showStatus() {
    console.log('\nüìä –°–¢–ê–¢–£–° –†–ê–ó–†–ê–ë–û–¢–ö–ò:');
    console.log('======================');
    
    console.log(`üîÑ –°—Ç–∞—Ç—É—Å: ${this.isRunning ? 'üü¢ –ê–∫—Ç–∏–≤–Ω–∞' : 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}`);
    console.log(`üìà –ü—Ä–æ—Ü–µ—Å—Å–æ–≤: ${this.processes.length}`);
    
    for (const processInfo of this.processes) {
      const status = processInfo.process.killed ? 'üî¥' : 'üü¢';
      console.log(`  ${status} ${processInfo.name}`);
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞–º—è—Ç–∏
    await memoryCleaner.showStats();
  }
}

// CLI –∑–∞–ø—É—Å–∫
const optimizedDev = new OptimizedDev();

if (process.argv[2]) {
  const command = process.argv[2];
  
  switch (command) {
    case 'start':
      optimizedDev.start();
      break;
      
    case 'status':
      optimizedDev.showStatus();
      break;
      
    default:
      console.log(`
‚ö° OPTIMIZED DEVELOPMENT MODE
=============================

–ö–æ–º–∞–Ω–¥—ã:
  start     –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É
  status    –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Ü–µ—Å—Å–æ–≤

–ü—Ä–∏–º–µ—Ä:
  node scripts/dev-optimized.js start
      `);
  }
} else {
  // –ó–∞–ø—É—Å–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  optimizedDev.start();
}

export default optimizedDev; 