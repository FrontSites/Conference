// Performance Monitor System
import fs from 'fs-extra';
import path from 'path';

class PerformanceMonitor {
  constructor() {
    this.metrics = {
      startTime: null,
      compilations: {
        scss: { count: 0, totalTime: 0, averageTime: 0 },
        js: { count: 0, totalTime: 0, averageTime: 0 },
        images: { count: 0, totalTime: 0, averageTime: 0 },
        php: { count: 0, totalTime: 0, averageTime: 0 }
      },
      systemInfo: {
        nodeVersion: process.version,
        platform: process.platform,
        arch: process.arch,
        memory: process.memoryUsage()
      }
    };
    this.logFile = 'performance.log';
  }

  start() {
    this.metrics.startTime = Date.now();
    console.log('üìä Performance Monitor –∑–∞–ø—É—â–µ–Ω');
  }

  trackCompilation(type, duration) {
    if (!this.metrics.compilations[type]) return;
    
    const metric = this.metrics.compilations[type];
    metric.count++;
    metric.totalTime += duration;
    metric.averageTime = metric.totalTime / metric.count;
    
    this.logMetric(type, duration);
  }

  logMetric(type, duration) {
    const timestamp = new Date().toISOString();
    const logEntry = `[${timestamp}] ${type.toUpperCase()}: ${duration}ms\n`;
    
    fs.appendFile(this.logFile, logEntry).catch(() => {});
    
    // –¶–≤–µ—Ç–Ω–æ–π –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
    const color = duration < 100 ? 'üü¢' : duration < 500 ? 'üü°' : 'üî¥';
    console.log(`${color} ${type.toUpperCase()}: ${duration}ms`);
  }

  getStats() {
    const uptime = this.metrics.startTime ? Date.now() - this.metrics.startTime : 0;
    
    return {
      uptime: Math.round(uptime / 1000),
      compilations: this.metrics.compilations,
      memory: process.memoryUsage(),
      systemInfo: this.metrics.systemInfo
    };
  }

  generateReport() {
    const stats = this.getStats();
    const report = `
üìä –û–¢–ß–Å–¢ –û –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò
============================

‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${Math.floor(stats.uptime / 60)}–º ${stats.uptime % 60}—Å

üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–û–ú–ü–ò–õ–Ø–¶–ò–ô:
${Object.entries(stats.compilations).map(([type, data]) => 
  `  ${type.toUpperCase()}: ${data.count} —Ä–∞–∑, —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: ${Math.round(data.averageTime)}ms`
).join('\n')}

üíæ –ü–ê–ú–Ø–¢–¨:
  –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: ${Math.round(stats.memory.heapUsed / 1024 / 1024)}MB
  –í—Å–µ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–æ: ${Math.round(stats.memory.heapTotal / 1024 / 1024)}MB

üñ•Ô∏è –°–ò–°–¢–ï–ú–ê:
  Node.js: ${stats.systemInfo.nodeVersion}
  –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ${stats.systemInfo.platform}
  –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: ${stats.systemInfo.arch}

üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:
${this.getRecommendations(stats)}
`;

    console.log(report);
    fs.writeFile('performance-report.txt', report).catch(() => {});
    
    return report;
  }

  getRecommendations(stats) {
    const recommendations = [];
    
    // –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ SCSS
    if (stats.compilations.scss.averageTime > 1000) {
      recommendations.push('  ‚Ä¢ SCSS –∫–æ–º–ø–∏–ª—è—Ü–∏—è –º–µ–¥–ª–µ–Ω–Ω–∞—è - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏ —Ä–∞–∑–±–∏–≤–∫—É —Ñ–∞–π–ª–æ–≤');
    }
    
    // –ê–Ω–∞–ª–∏–∑ JS
    if (stats.compilations.js.averageTime > 2000) {
      recommendations.push('  ‚Ä¢ JS –º–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è –º–µ–¥–ª–µ–Ω–Ω–∞—è - –ø—Ä–æ–≤–µ—Ä—å —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤');
    }
    
    // –ê–Ω–∞–ª–∏–∑ –ø–∞–º—è—Ç–∏
    if (stats.memory.heapUsed > 100 * 1024 * 1024) {
      recommendations.push('  ‚Ä¢ –í—ã—Å–æ–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—É');
    }
    
    // –ê–Ω–∞–ª–∏–∑ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–π
    const totalCompilations = Object.values(stats.compilations).reduce((sum, data) => sum + data.count, 0);
    if (totalCompilations > 100) {
      recommendations.push('  ‚Ä¢ –ú–Ω–æ–≥–æ –∫–æ–º–ø–∏–ª—è—Ü–∏–π - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è');
    }
    
    return recommendations.length > 0 ? recommendations.join('\n') : '  ‚Ä¢ –í—Å—ë –æ—Ç–ª–∏—á–Ω–æ! –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ üöÄ';
  }

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤
  cleanup() {
    const maxAge = 7 * 24 * 60 * 60 * 1000; // 7 –¥–Ω–µ–π
    
    fs.stat(this.logFile).then(stats => {
      if (Date.now() - stats.mtime.getTime() > maxAge) {
        fs.remove(this.logFile);
        console.log('üßπ –°—Ç–∞—Ä—ã–µ –ª–æ–≥–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ—á–∏—â–µ–Ω—ã');
      }
    }).catch(() => {});
  }
}

// –°–æ–∑–¥–∞—ë–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
const monitor = new PerformanceMonitor();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ gulpfile
export default monitor;

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
export function measureTime(fn, type) {
  return async (...args) => {
    const start = Date.now();
    const result = await fn(...args);
    const duration = Date.now() - start;
    
    monitor.trackCompilation(type, duration);
    return result;
  };
}

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞
if (process.argv[2] === '--report') {
  monitor.generateReport();
} 