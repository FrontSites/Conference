// Git Automation System
import { exec } from 'child_process';
import { promisify } from 'util';
import fs from 'fs-extra';
import path from 'path';
import chokidar from 'chokidar';

const execAsync = promisify(exec);

class GitAutomation {
  constructor() {
    this.isGitRepo = false;
    this.version = 1;
    this.lastCommitTime = 0;
    this.commitDelay = 30000; // 30 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –∫–æ–º–º–∏—Ç–∞–º–∏
    this.watchFiles = [
      'src/**/*',
      'gulpfile.mjs',
      'vite.config.js',
      'package.json',
      '*.php',
      'template-parts/**/*',
      'assets/css/**/*',
      'assets/js/**/*'
    ];
    this.githubUsername = 'FrontSites'; // –¢–≤–æ–π GitHub username
    this.projectName = this.getProjectName();
  }

  getProjectName() {
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ package.json
      const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
      if (packageJson.name && packageJson.name !== 'template') {
        return packageJson.name;
      }
    } catch {}
    
    // –ï—Å–ª–∏ –≤ package.json –Ω–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –∏–ª–∏ –æ–Ω–æ "template", –±–µ—Ä—ë–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏
    try {
      const currentDir = process.cwd();
      const folderName = path.basename(currentDir);
      
      // –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è GitHub
      const cleanName = folderName
        .toLowerCase()
        .replace(/[^a-z0-9-]/g, '-')
        .replace(/--+/g, '-')
        .replace(/^-|-$/g, '');
      
      return cleanName || 'wordpress-theme';
    } catch {
      return 'wordpress-theme';
    }
  }

  async init() {
    console.log('üåê Git Automation System –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    await this.checkGitStatus();
    await this.loadVersion();
  }

  async checkGitStatus() {
    try {
      await execAsync('git status');
      this.isGitRepo = true;
      console.log('‚úÖ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞–π–¥–µ–Ω');
    } catch {
      this.isGitRepo = false;
      console.log('üìÅ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
  }

  async loadVersion() {
    try {
      const versionFile = '.git-version';
      if (await fs.pathExists(versionFile)) {
        const version = await fs.readFile(versionFile, 'utf8');
        this.version = parseInt(version.trim()) || 1;
      }
      console.log(`üìä –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: v${this.version}`);
    } catch {
      this.version = 1;
    }
  }

  async saveVersion() {
    try {
      await fs.writeFile('.git-version', this.version.toString());
    } catch (error) {
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–µ—Ä—Å–∏—é:', error.message);
    }
  }

  async initializeGitRepo() {
    if (this.isGitRepo) {
      console.log('‚úÖ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      return;
    }

    try {
      console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...');
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Git
      await execAsync('git init');
      await execAsync('git branch -M main');
      
      // –°–æ–∑–¥–∞–Ω–∏–µ .gitignore
      await this.createGitignore();
      
      // –ü–µ—Ä–≤—ã–π –∫–æ–º–º–∏—Ç
      await execAsync('git add .');
      await execAsync('git commit -m "üéâ Initial commit - WordPress Theme Development System v2.0"');
      
      this.isGitRepo = true;
      console.log('‚úÖ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Git:', error.message);
      throw error;
    }
  }

  async createGitignore() {
    const gitignoreContent = `# Dependencies
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Build outputs
/public/build/
*.tgz
*.tar.gz

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Coverage directory used by tools like istanbul
coverage/
*.lcov

# nyc test coverage
.nyc_output

# IDE files
.vscode/
.idea/
*.swp
*.swo
*~

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# WordPress specific
wp-config.php
wp-content/uploads/
wp-content/cache/
wp-content/backup-db/
wp-content/advanced-cache.php
wp-content/wp-cache-config.php

# Project specific
performance.log
notifications.log
backups/
*.bak
.git-version

# Temporary files
*.tmp
*.temp
.cache/
`;

    await fs.writeFile('.gitignore', gitignoreContent);
    console.log('‚úÖ .gitignore —Å–æ–∑–¥–∞–Ω');
  }

  async createGitHubRepo() {
    try {
      console.log('üåê –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –Ω–∞ GitHub...');
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º GitHub CLI –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
      try {
        await execAsync('gh --version');
        
        const createCommand = `gh repo create ${this.githubUsername}/${this.projectName} --public --description "WordPress Theme Development System with Vite + Gulp automation" --clone=false`;
        await execAsync(createCommand);
        
        console.log(`‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å–æ–∑–¥–∞–Ω: https://github.com/${this.githubUsername}/${this.projectName}`);
        
        // –î–æ–±–∞–≤–ª—è–µ–º remote origin
        const remoteUrl = `https://github.com/${this.githubUsername}/${this.projectName}.git`;
        await execAsync(`git remote add origin ${remoteUrl}`);
        
        // –ü—É—à–∏–º –ø–µ—Ä–≤—ã–π –∫–æ–º–º–∏—Ç
        await execAsync('git push -u origin main');
        
        console.log('üöÄ –ö–æ–¥ –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ GitHub!');
        
      } catch (ghError) {
        console.log('‚ö†Ô∏è GitHub CLI –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –≤—Ä—É—á–Ω—É—é:');
        console.log(`1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://github.com/new`);
        console.log(`2. –ù–∞–∑–≤–∞–Ω–∏–µ: ${this.projectName}`);
        console.log(`3. –û–ø–∏—Å–∞–Ω–∏–µ: WordPress Theme Development System`);
        console.log(`4. –°–¥–µ–ª–∞–π—Ç–µ –ø—É–±–ª–∏—á–Ω—ã–º`);
        console.log(`5. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—ã:`);
        console.log(`   git remote add origin https://github.com/${this.githubUsername}/${this.projectName}.git`);
        console.log(`   git push -u origin main`);
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è:', error.message);
    }
  }

  async autoCommit(changedFiles = []) {
    if (!this.isGitRepo) {
      console.log('‚ö†Ô∏è Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      return;
    }

    const now = Date.now();
    if (now - this.lastCommitTime < this.commitDelay) {
      console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∫–æ–º–º–∏—Ç–æ–º...');
      return;
    }

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
      const { stdout: status } = await execAsync('git status --porcelain');
      if (!status.trim()) {
        console.log('üìù –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∫–æ–º–º–∏—Ç–∞');
        return;
      }

      console.log(`üîÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∞–≤—Ç–æ–∫–æ–º–º–∏—Ç—É v${this.version}...`);
      
      // 1. –°–ù–ê–ß–ê–õ–ê –ö–û–ú–ü–ò–õ–ò–†–£–ï–ú –§–ê–ô–õ–´
      console.log('‚öôÔ∏è –ö–æ–º–ø–∏–ª—è—Ü–∏—è —Ñ–∞–π–ª–æ–≤...');
      try {
        await execAsync('npm run build');
        console.log('‚úÖ –ö–æ–º–ø–∏–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      } catch (buildError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏:', buildError.message);
        console.log('‚ö†Ô∏è –ö–æ–º–º–∏—Ç –æ—Ç–º–µ–Ω—ë–Ω –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏');
        return;
      }
      
      // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–º–ø–∏–ª—è—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
      try {
        await fs.access('assets/css/main.min.css');
        await fs.access('assets/js/main.min.js');
        console.log('‚úÖ –°–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã');
      } catch (fileError) {
        console.error('‚ùå –°–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        console.log('‚ö†Ô∏è –ö–æ–º–º–∏—Ç –æ—Ç–º–µ–Ω—ë–Ω');
        return;
      }
      
      // 3. –¢–ï–ü–ï–†–¨ –î–ï–õ–ê–ï–ú –ö–û–ú–ú–ò–¢
      console.log(`üìù –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞ v${this.version}...`);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–≤–∫–ª—é—á–∞—è —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã)
      await execAsync('git add .');
      
      // –°–æ–∑–¥–∞—ë–º –∫–æ–º–º–∏—Ç —Å –≤–µ—Ä—Å–∏–µ–π
      const commitMessage = this.generateCommitMessage(changedFiles);
      await execAsync(`git commit -m "${commitMessage}"`);
      
      // –ü—É—à–∏–º –µ—Å–ª–∏ –µ—Å—Ç—å remote
      try {
        await execAsync('git push');
        console.log('üöÄ –ò–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã –Ω–∞ GitHub');
      } catch (pushError) {
        console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞ GitHub (–≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ—Ç remote)');
      }
      
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤–µ—Ä—Å–∏—é –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
      this.version++;
      await this.saveVersion();
      this.lastCommitTime = now;
      
      console.log(`‚úÖ –ê–≤—Ç–æ–∫–æ–º–º–∏—Ç v${this.version - 1} –≤—ã–ø–æ–ª–Ω–µ–Ω`);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–∫–æ–º–º–∏—Ç–∞:', error.message);
    }
  }

  generateCommitMessage(changedFiles) {
    const fileTypes = this.analyzeChangedFiles(changedFiles);
    
    let message = `üöÄ Build & Commit v${this.version}`;
    
    if (fileTypes.length > 0) {
      message += ` - ${fileTypes.join(', ')}`;
    }
    
    const timestamp = new Date().toLocaleString('ru-RU');
    message += ` (${timestamp})`;
    
    return message;
  }

  analyzeChangedFiles(changedFiles) {
    const types = [];
    
    if (changedFiles.some(f => f.includes('.scss'))) types.push('üìù SCSS');
    if (changedFiles.some(f => f.includes('.js'))) types.push('üìú JS');
    if (changedFiles.some(f => f.includes('.php'))) types.push('üêò PHP');
    if (changedFiles.some(f => f.includes('package.json'))) types.push('üì¶ Dependencies');
    if (changedFiles.some(f => f.includes('gulpfile') || f.includes('vite.config'))) types.push('‚öôÔ∏è Config');
    if (changedFiles.some(f => f.includes('.md'))) types.push('üìö Docs');
    
    return types;
  }

  async startWatching() {
    if (!this.isGitRepo) {
      console.log('‚ö†Ô∏è Git –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ git:init —Å–Ω–∞—á–∞–ª–∞');
      return;
    }

    console.log('üëÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π...');
    
    const watcher = chokidar.watch(this.watchFiles, {
      ignored: [
        '**/node_modules/**',
        '**/.git/**',
        '**/backups/**',
        '**/*.log',
        '**/*.bak'
      ],
      persistent: true,
      ignoreInitial: true
    });

    let changedFiles = [];
    let timeoutId = null;

    const processChanges = () => {
      if (changedFiles.length > 0) {
        console.log(`üìÅ –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã: ${changedFiles.length} —Ñ–∞–π–ª–æ–≤`);
        this.autoCommit([...changedFiles]);
        changedFiles = [];
      }
    };

    watcher.on('change', (filePath) => {
      changedFiles.push(filePath);
      console.log(`üìù –ò–∑–º–µ–Ω—ë–Ω: ${path.basename(filePath)}`);
      
      // –î–µ–±–∞—É–Ω—Å–∏–Ω–≥ - –∂–¥—ë–º 10 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
      clearTimeout(timeoutId);
      timeoutId = setTimeout(processChanges, 10000);
    });

    watcher.on('add', (filePath) => {
      changedFiles.push(filePath);
      console.log(`‚ûï –î–æ–±–∞–≤–ª–µ–Ω: ${path.basename(filePath)}`);
      
      clearTimeout(timeoutId);
      timeoutId = setTimeout(processChanges, 10000);
    });

    watcher.on('unlink', (filePath) => {
      changedFiles.push(filePath);
      console.log(`üóëÔ∏è –£–¥–∞–ª—ë–Ω: ${path.basename(filePath)}`);
      
      clearTimeout(timeoutId);
      timeoutId = setTimeout(processChanges, 10000);
    });

    console.log('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ');
    console.log('üí° –ò–∑–º–µ–Ω–µ–Ω–∏—è –±—É–¥—É—Ç –∫–æ–º–º–∏—Ç–∏—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è');
  }

  async manualCommit(message = null) {
    if (!this.isGitRepo) {
      console.log('‚ö†Ô∏è Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      return;
    }

    try {
      console.log('üîÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ä—É—á–Ω–æ–º—É –∫–æ–º–º–∏—Ç—É...');
      
      // 1. –°–ù–ê–ß–ê–õ–ê –ö–û–ú–ü–ò–õ–ò–†–£–ï–ú –§–ê–ô–õ–´
      console.log('‚öôÔ∏è –ö–æ–º–ø–∏–ª—è—Ü–∏—è —Ñ–∞–π–ª–æ–≤...');
      try {
        await execAsync('npm run build');
        console.log('‚úÖ –ö–æ–º–ø–∏–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      } catch (buildError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏:', buildError.message);
        console.log('‚ö†Ô∏è –ö–æ–º–º–∏—Ç –æ—Ç–º–µ–Ω—ë–Ω –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏');
        return;
      }
      
      // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–º–ø–∏–ª—è—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
      try {
        await fs.access('assets/css/main.min.css');
        await fs.access('assets/js/main.min.js');
        console.log('‚úÖ –°–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã');
      } catch (fileError) {
        console.error('‚ùå –°–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        console.log('‚ö†Ô∏è –ö–æ–º–º–∏—Ç –æ—Ç–º–µ–Ω—ë–Ω');
        return;
      }
      
      // 3. –¢–ï–ü–ï–†–¨ –î–ï–õ–ê–ï–ú –ö–û–ú–ú–ò–¢
      const commitMessage = message || `üîÑ Manual commit v${this.version}`;
      
      console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞...');
      await execAsync('git add .');
      await execAsync(`git commit -m "${commitMessage}"`);
      
      try {
        await execAsync('git push');
        console.log('üöÄ –ò–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã –Ω–∞ GitHub');
      } catch {
        console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞ GitHub');
      }
      
      this.version++;
      await this.saveVersion();
      
      console.log(`‚úÖ –†—É—á–Ω–æ–π –∫–æ–º–º–∏—Ç v${this.version - 1} –≤—ã–ø–æ–ª–Ω–µ–Ω`);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–≥–æ –∫–æ–º–º–∏—Ç–∞:', error.message);
    }
  }

  async getStatus() {
    if (!this.isGitRepo) {
      console.log('‚ùå Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      return;
    }

    try {
      const { stdout: status } = await execAsync('git status --porcelain');
      const { stdout: branch } = await execAsync('git branch --show-current');
      const { stdout: remote } = await execAsync('git remote -v').catch(() => ({ stdout: '–ù–µ—Ç remote' }));
      
      console.log('\nüìä GIT –°–¢–ê–¢–£–°:');
      console.log('================');
      console.log(`–í–µ—Ç–∫–∞: ${branch.trim()}`);
      console.log(`–í–µ—Ä—Å–∏—è: v${this.version}`);
      console.log(`–ü—Ä–æ–µ–∫—Ç: ${this.projectName}`);
      
      if (status.trim()) {
        console.log('\nüìù –ù–µc–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:');
        console.log(status);
      } else {
        console.log('\n‚úÖ –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
      }
      
      if (remote.includes('github.com')) {
        console.log(`\nüåê GitHub: https://github.com/${this.githubUsername}/${this.projectName}`);
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error.message);
    }
  }

  async stopWatching() {
    // –õ–æ–≥–∏–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    console.log('üõë –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
  }
}

// –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä
const gitAuto = new GitAutomation();

// CLI –∫–æ–º–∞–Ω–¥—ã
if (process.argv[2]) {
  const command = process.argv[2];
  const arg = process.argv[3];
  
  switch (command) {
    case 'init':
      gitAuto.init().then(async () => {
        await gitAuto.initializeGitRepo();
        await gitAuto.createGitHubRepo();
      });
      break;
      
    case 'watch':
      gitAuto.init().then(() => gitAuto.startWatching());
      break;
      
    case 'commit':
      gitAuto.init().then(() => gitAuto.manualCommit(arg));
      break;
      
    case 'status':
      gitAuto.init().then(() => gitAuto.getStatus());
      break;
      
    case 'push':
      gitAuto.init().then(async () => {
        await gitAuto.autoCommit();
      });
      break;
      
    default:
      console.log(`
üåê GIT AUTOMATION SYSTEM
========================

–ö–æ–º–∞–Ω–¥—ã:
  init     –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Git –∏ —Å–æ–∑–¥–∞—Ç—å GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
  watch    –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  commit   –°–¥–µ–ª–∞—Ç—å —Ä—É—á–Ω–æ–π –∫–æ–º–º–∏—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º)
  status   –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å Git
  push     –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∫–æ–º–º–∏—Ç –∏ push

–ü—Ä–∏–º–µ—Ä—ã:
  node scripts/git-automation.js init
  node scripts/git-automation.js watch
  node scripts/git-automation.js commit "–î–æ–±–∞–≤–∏–ª –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é"
  node scripts/git-automation.js status
      `);
  }
}

export default gitAuto; 