// Advanced Notification System for Windows
import { exec } from 'child_process';
import { promisify } from 'util';
import fs from 'fs-extra';

const execAsync = promisify(exec);

class NotificationSystem {
  constructor() {
    this.isEnabled = true;
    this.soundEnabled = true;
    this.toastEnabled = true;
    this.logFile = 'notifications.log';
  }

  async init() {
    console.log('üîî –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É Windows Toast
    if (process.platform === 'win32') {
      try {
        await execAsync('powershell -Command "Get-Command New-BurntToastNotification -ErrorAction SilentlyContinue"');
        console.log('‚úÖ BurntToast –º–æ–¥—É–ª—å –¥–æ—Å—Ç—É–ø–µ–Ω');
      } catch {
        console.log('‚ö†Ô∏è –î–ª—è –ª—É—á—à–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: Install-Module -Name BurntToast');
      }
    }
  }

  async notify(type, title, message, options = {}) {
    if (!this.isEnabled) return;

    const notification = {
      type,
      title,
      message,
      timestamp: new Date().toISOString(),
      ...options
    };

    // –õ–æ–≥–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    await this.logNotification(notification);

    // –ö–æ–Ω—Å–æ–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —Ü–≤–µ—Ç–∞–º–∏
    this.consoleNotify(notification);

    // Windows Toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    if (this.toastEnabled && process.platform === 'win32') {
      await this.windowsToast(notification);
    }

    // –ó–≤—É–∫–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    if (this.soundEnabled) {
      await this.playSound(type);
    }
  }

  consoleNotify({ type, title, message }) {
    const icons = {
      success: '‚úÖ',
      error: '‚ùå',
      warning: '‚ö†Ô∏è',
      info: '‚ÑπÔ∏è',
      build: 'üèóÔ∏è',
      deploy: 'üöÄ'
    };

    const colors = {
      success: '\x1b[32m', // –ó–µ–ª—ë–Ω—ã–π
      error: '\x1b[31m',   // –ö—Ä–∞—Å–Ω—ã–π
      warning: '\x1b[33m', // –ñ—ë–ª—Ç—ã–π
      info: '\x1b[36m',    // –¶–∏–∞–Ω
      build: '\x1b[35m',   // –ü—É—Ä–ø—É—Ä–Ω—ã–π
      deploy: '\x1b[34m'   // –°–∏–Ω–∏–π
    };

    const reset = '\x1b[0m';
    const icon = icons[type] || '‚ÑπÔ∏è';
    const color = colors[type] || colors.info;

    console.log(`\n${color}${icon} ${title}${reset}`);
    console.log(`${color}${message}${reset}\n`);
  }

  async windowsToast({ type, title, message, duration = 5000 }) {
    try {
      const icons = {
        success: '‚úÖ',
        error: '‚ùå', 
        warning: '‚ö†Ô∏è',
        info: '‚ÑπÔ∏è',
        build: 'üèóÔ∏è',
        deploy: 'üöÄ'
      };

      const icon = icons[type] || '‚ÑπÔ∏è';
      const fullTitle = `${icon} ${title}`;

      // –ü—Ä–æ—Å—Ç–æ–µ Windows —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      const simpleCommand = `powershell -Command "Add-Type -AssemblyName System.Windows.Forms; [System.Windows.Forms.MessageBox]::Show('${message}', '${fullTitle}', 'OK', 'Information')"`;
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º BurntToast –¥–ª—è –ª—É—á—à–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      const toastCommand = `powershell -Command "
        try {
          Import-Module BurntToast -ErrorAction Stop;
          New-BurntToastNotification -Text '${fullTitle}', '${message}' -AppLogo 'C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe';
        } catch {
          [System.Reflection.Assembly]::LoadWithPartialName('System.Windows.Forms');
          [System.Windows.Forms.MessageBox]::Show('${message}', '${fullTitle}', 'OK', 'Information');
        }
      "`;

      await execAsync(toastCommand);
    } catch (error) {
      // Fallback - –ø—Ä–æ—Å—Ç–æ –≤ –∫–æ–Ω—Å–æ–ª—å
      console.log(`üîî ${title}: ${message}`);
    }
  }

  async playSound(type) {
    try {
      const sounds = {
        success: 'SystemAsterisk',
        error: 'SystemHand',
        warning: 'SystemExclamation',
        info: 'SystemNotification',
        build: 'SystemQuestion',
        deploy: 'SystemAsterisk'
      };

      const sound = sounds[type] || 'SystemNotification';
      
      const command = `powershell -Command "[System.Media.SystemSounds]::${sound}.Play()"`;
      await execAsync(command);
    } catch {
      // Fallback - –ø—Ä–æ—Å—Ç–æ–π beep
      process.stdout.write('\x07');
    }
  }

  async logNotification(notification) {
    try {
      const logEntry = `[${notification.timestamp}] ${notification.type.toUpperCase()}: ${notification.title} - ${notification.message}\n`;
      await fs.appendFile(this.logFile, logEntry);
    } catch {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    }
  }

  // –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —á–∞—Å—Ç—ã—Ö —Å–ª—É—á–∞–µ–≤
  async success(title, message) {
    return this.notify('success', title, message);
  }

  async error(title, message) {
    return this.notify('error', title, message);
  }

  async warning(title, message) {
    return this.notify('warning', title, message);
  }

  async buildComplete(duration) {
    return this.notify('build', '–°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', `–í—Ä–µ–º—è —Å–±–æ—Ä–∫–∏: ${duration}ms`, { duration });
  }

  async deployReady(projectName) {
    return this.notify('deploy', '–ì–æ—Ç–æ–≤–æ –∫ –¥–µ–ø–ª–æ—é', `–ü—Ä–æ–µ–∫—Ç ${projectName} –≥–æ—Ç–æ–≤ –∫ –∑–∞–≥—Ä—É–∑–∫–µ`, { projectName });
  }

  async compilationError(file, error) {
    return this.notify('error', '–û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏', `${file}: ${error}`, { file, error });
  }

  async imageConverted(originalFile, webpFile, savings) {
    const message = `${originalFile} ‚Üí ${webpFile}\n–≠–∫–æ–Ω–æ–º–∏—è: ${savings}%`;
    return this.notify('success', '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ', message, { originalFile, webpFile, savings });
  }

  async performanceAlert(metric, value, threshold) {
    const message = `${metric}: ${value} (–ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç ${threshold})`;
    return this.notify('warning', '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏', message, { metric, value, threshold });
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã
  enable() {
    this.isEnabled = true;
    console.log('üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã');
  }

  disable() {
    this.isEnabled = false;
    console.log('üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã');
  }

  enableSound() {
    this.soundEnabled = true;
    console.log('üîä –ó–≤—É–∫–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã');
  }

  disableSound() {
    this.soundEnabled = false;
    console.log('üîá –ó–≤—É–∫–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã');
  }

  async testNotifications() {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');
    
    await this.success('–¢–µ—Å—Ç —É—Å–ø–µ—Ö–∞', '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ');
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    await this.warning('–¢–µ—Å—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è', '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ');
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    await this.error('–¢–µ—Å—Ç –æ—à–∏–±–∫–∏', '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ');
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    await this.buildComplete(1234);
    
    console.log('‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
  }

  async getStats() {
    try {
      const logContent = await fs.readFile(this.logFile, 'utf8');
      const lines = logContent.split('\n').filter(line => line.trim());
      
      const stats = {
        total: lines.length,
        byType: {}
      };

      lines.forEach(line => {
        const match = line.match(/\] (\w+):/);
        if (match) {
          const type = match[1].toLowerCase();
          stats.byType[type] = (stats.byType[type] || 0) + 1;
        }
      });

      return stats;
    } catch {
      return { total: 0, byType: {} };
    }
  }
}

// –°–æ–∑–¥–∞—ë–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
const notifications = new NotificationSystem();

// CLI –∫–æ–º–∞–Ω–¥—ã
if (process.argv[2]) {
  const command = process.argv[2];
  
  switch (command) {
    case '--test':
      notifications.init().then(() => notifications.testNotifications());
      break;
    case '--stats':
      notifications.getStats().then(stats => {
        console.log('\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô:');
        console.log(`–í—Å–µ–≥–æ: ${stats.total}`);
        Object.entries(stats.byType).forEach(([type, count]) => {
          console.log(`${type.toUpperCase()}: ${count}`);
        });
      });
      break;
    case '--disable-sound':
      notifications.disableSound();
      break;
    case '--enable-sound':
      notifications.enableSound();
      break;
    default:
      console.log(`
üîî –ö–û–ú–ê–ù–î–´ –°–ò–°–¢–ï–ú–´ –£–í–ï–î–û–ú–õ–ï–ù–ò–ô:
  --test           –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  --stats          –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  --disable-sound  –û—Ç–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫
  --enable-sound   –í–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫
      `);
  }
}

export default notifications; 