// Browser-Sync Server for PHP Hot Reload
import browserSync from 'browser-sync';
import chokidar from 'chokidar';
import path from 'path';
import { networkInterfaces } from 'os';

const bs = browserSync.create();

class BrowserSyncServer {
  constructor() {
    this.isRunning = false;
    this.config = {
      proxy: false, // –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
      server: {
        baseDir: './',
        index: 'index.html'
      },
      files: [
        'assets/css/*.css',
        'assets/js/*.js',
        '**/*.php',
        '**/*.html'
      ],
      port: 3001,
      ui: {
        port: 3002
      },
      open: false,
      notify: false,
      ghostMode: {
        clicks: true,
        forms: true,
        scroll: true
      },
      logLevel: 'info',
      logPrefix: 'üåê BrowserSync'
    };
  }

  async start(options = {}) {
    if (this.isRunning) {
      console.log('‚ö†Ô∏è Browser-Sync —É–∂–µ –∑–∞–ø—É—â–µ–Ω');
      return;
    }

    const config = { ...this.config, ...options };
    
    try {
      await new Promise((resolve, reject) => {
        bs.init(config, (err) => {
          if (err) reject(err);
          else resolve();
        });
      });

      this.isRunning = true;
      console.log('üåê Browser-Sync –∑–∞–ø—É—â–µ–Ω!');
      console.log(`üì± Local: http://localhost:${config.port}`);
      console.log(`üñ•Ô∏è External: http://${this.getLocalIP()}:${config.port}`);
      console.log(`‚öôÔ∏è UI: http://localhost:${config.ui.port}`);
      
      this.setupWatchers();
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Browser-Sync:', error.message);
    }
  }

  setupWatchers() {
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ watchers –¥–ª—è —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    const phpWatcher = chokidar.watch(['**/*.php', '!node_modules/**'], {
      ignoreInitial: true
    });

    const cssWatcher = chokidar.watch('assets/css/**/*.css', {
      ignoreInitial: true
    });

    const jsWatcher = chokidar.watch('assets/js/**/*.js', {
      ignoreInitial: true
    });

    // PHP —Ñ–∞–π–ª—ã - –ø–æ–ª–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞
    phpWatcher.on('change', (filePath) => {
      console.log(`üîÑ PHP –∏–∑–º–µ–Ω—ë–Ω: ${path.basename(filePath)}`);
      bs.reload();
    });

    // CSS - –∏–Ω–∂–µ–∫—Ü–∏—è –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
    cssWatcher.on('change', (filePath) => {
      console.log(`üé® CSS –æ–±–Ω–æ–≤–ª—ë–Ω: ${path.basename(filePath)}`);
      bs.reload('*.css');
    });

    // JS - –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞
    jsWatcher.on('change', (filePath) => {
      console.log(`üìú JS –æ–±–Ω–æ–≤–ª—ë–Ω: ${path.basename(filePath)}`);
      bs.reload();
    });

    console.log('üëÄ Watchers –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –¥–ª—è PHP, CSS, JS');
  }

  async stop() {
    if (!this.isRunning) {
      console.log('‚ö†Ô∏è Browser-Sync –Ω–µ –∑–∞–ø—É—â–µ–Ω');
      return;
    }

    bs.exit();
    this.isRunning = false;
    console.log('üõë Browser-Sync –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }

  async reload(files = null) {
    if (!this.isRunning) {
      console.log('‚ö†Ô∏è Browser-Sync –Ω–µ –∑–∞–ø—É—â–µ–Ω');
      return;
    }

    if (files) {
      bs.reload(files);
    } else {
      bs.reload();
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ IP
  getLocalIP() {
    const nets = networkInterfaces();
    
    for (const name of Object.keys(nets)) {
      for (const net of nets[name]) {
        if (net.family === 'IPv4' && !net.internal) {
          return net.address;
        }
      }
    }
    
    return 'localhost';
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è WordPress
  setupWordPress(wpUrl) {
    this.config.proxy = wpUrl;
    this.config.server = false;
    console.log(`üêò –ù–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–æ–∫—Å–∏ –¥–ª—è WordPress: ${wpUrl}`);
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  setupMobile() {
    this.config.ghostMode = {
      clicks: true,
      forms: true,
      scroll: true
    };
    this.config.open = 'external';
    console.log('üì± –ù–∞—Å—Ç—Ä–æ–µ–Ω —Ä–µ–∂–∏–º –º–æ–±–∏–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
  }

  // –¢—É–Ω–Ω–µ–ª—å –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞
  async setupTunnel() {
    this.config.tunnel = true;
    console.log('üåç –í–∫–ª—é—á—ë–Ω —Ç—É–Ω–Ω–µ–ª—å –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞');
  }

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  getStats() {
    if (!this.isRunning) {
      return { running: false };
    }

    return {
      running: true,
      connections: bs.sockets.sockets.size,
      port: this.config.port,
      uiPort: this.config.ui.port,
      localIP: this.getLocalIP()
    };
  }
}

// –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä
const bsServer = new BrowserSyncServer();

// CLI –∫–æ–º–∞–Ω–¥—ã
if (process.argv[2]) {
  const command = process.argv[2];
  
  switch (command) {
    case '--start':
      bsServer.start();
      break;
      
    case '--wordpress':
      const wpUrl = process.argv[3] || 'http://localhost:8080';
      bsServer.setupWordPress(wpUrl);
      bsServer.start();
      break;
      
    case '--mobile':
      bsServer.setupMobile();
      bsServer.start();
      break;
      
    case '--tunnel':
      bsServer.setupTunnel();
      bsServer.start();
      break;
      
    case '--stop':
      bsServer.stop();
      break;
      
    case '--stats':
      const stats = bsServer.getStats();
      console.log('\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê BROWSER-SYNC:');
      console.log('============================');
      console.log(`–°—Ç–∞—Ç—É—Å: ${stats.running ? '‚úÖ –ó–∞–ø—É—â–µ–Ω' : '‚ùå –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
      if (stats.running) {
        console.log(`–ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${stats.connections}`);
        console.log(`–ü–æ—Ä—Ç: ${stats.port}`);
        console.log(`UI –ü–æ—Ä—Ç: ${stats.uiPort}`);
        console.log(`IP: ${stats.localIP}`);
      }
      break;
      
    default:
      console.log(`
üåê BROWSER-SYNC –°–ï–†–í–ï–†
======================

–ö–æ–º–∞–Ω–¥—ã:
  --start      –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä
  --wordpress  –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å WordPress –ø—Ä–æ–∫—Å–∏
  --mobile     –†–µ–∂–∏–º –º–æ–±–∏–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  --tunnel     –í–∫–ª—é—á–∏—Ç—å –≤–Ω–µ—à–Ω–∏–π —Ç—É–Ω–Ω–µ–ª—å
  --stop       –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä
  --stats      –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

–ü—Ä–∏–º–µ—Ä—ã:
  node scripts/browser-sync-server.js --start
  node scripts/browser-sync-server.js --wordpress http://localhost:8080
  node scripts/browser-sync-server.js --mobile
      `);
  }
}

export default bsServer; 