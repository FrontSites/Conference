// gulpfile.mjs (Full version with SCSS, JS, PHP, auto-template creation, and zip build)

import gulp from 'gulp';
import gulpSass from 'gulp-sass';
import * as dartSass from 'sass';
import cleanCSS from 'gulp-clean-css';
import rename from 'gulp-rename';
import plumber from 'gulp-plumber';
import fs from 'fs-extra';
import path from 'path';
import pkg from 'glob';
const { glob } = pkg;
import postcss from 'gulp-postcss';
import autoprefixer from 'autoprefixer';
import uglify from 'gulp-uglify';
import concat from 'gulp-concat';
import { fileURLToPath } from 'url';
import { dirname } from 'path';
import sharp from 'sharp';
import { exec } from 'child_process';
import { promisify } from 'util';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
const sassCompiler = gulpSass(dartSass);

const execAsync = promisify(exec);

let isCompiling = false;

const paths = {
  scss: {
    src: 'src/scss/**/*.scss',
    main: 'src/scss/main.scss',
    dest: 'assets/css'
  },
  js: {
    src: ['src/js/*.js', '!src/js/*.min.js'],
    dest: 'assets/js'
  },
  php: {
    frontPage: 'front-page.php',
    templateParts: 'template-parts/**/*.php'
  },
  images: {
    src: 'assets/images/**/*.{jpg,jpeg,png}',
    dest: 'assets/images'
  }
};

const importStartMarker = '// AUTO-GENERATED IMPORTS START';
const importEndMarker = '// AUTO-GENERATED IMPORTS END';

export function compileScss(done) {
  if (isCompiling) return done();
  isCompiling = true;

  gulp.src(paths.scss.main)
    .pipe(plumber(function (err) {
      console.error('SCSS error:', err.message);
      this.emit('end');
    }))
    .pipe(sassCompiler())
    .pipe(postcss([autoprefixer()]))
    .pipe(cleanCSS())
    .pipe(rename({ basename: 'main', suffix: '.min' }))
    .pipe(gulp.dest(paths.scss.dest))
    .on('end', () => { isCompiling = false; console.log('SCSS compiled.'); done(); });
}

export function updateMainScss(done) {
  const files = glob.sync(paths.scss.src);
  let scssFiles = files.filter(file =>
    !file.endsWith('main.scss') &&
    !file.endsWith('variables.scss') &&
    !file.endsWith('mixins.scss')
  );

  scssFiles.sort((a, b) => {
    if (a.includes('variables.scss')) return -1;
    if (b.includes('variables.scss')) return 1;
    if (a.includes('mixins.scss')) return -1;
    if (b.includes('mixins.scss')) return 1;
    return a.localeCompare(b);
  });

  const imports = [
    '@use "./variables" as *;',
    '@use "./mixins" as *;',
    '',
    ...scssFiles.map(file => {
      const relative = path.relative(path.dirname(paths.scss.main), file).replace(/\\/g, '/').replace('.scss', '');
      return `@use "./${relative}" as *;`;
    })
  ].join('\n');

  fs.readFile(paths.scss.main, 'utf8').then(currentContent => {
    const startIndex = currentContent.indexOf(importStartMarker);
    const endIndex = currentContent.indexOf(importEndMarker);
    if (startIndex === -1 || endIndex === -1) return done(new Error('Markers not found'));

    const before = currentContent.slice(0, startIndex + importStartMarker.length);
    const after = currentContent.slice(endIndex);
    return fs.writeFile(paths.scss.main, `${before}\n${imports}\n${after}`, 'utf8');
  }).then(() => {
    console.log(`main.scss updated with ${scssFiles.length + 2} imports.`);
    done();
  }).catch(done);
}

export function addMixinsAndVariablesToScssFiles(filePath, done) {
  const fileName = path.basename(filePath);
  if (!filePath.endsWith('.scss') || ['main.scss', 'variables.scss', 'mixins.scss'].includes(fileName)) return done?.();

  fs.readFile(filePath, 'utf8')
    .then(content => {
      if (content.includes('@use "./variables"') && content.includes('@use "./mixins"')) return;
      return fs.writeFile(filePath, `@use "./variables" as *;\n@use "./mixins" as *;\n\n${content}`, 'utf8');
    })
    .then(() => { console.log(`‚úÖ Auto @use added to ${fileName}`); done?.(); })
    .catch(err => { console.error(`‚ùå Error writing to ${fileName}:`, err); done?.(); });
}

function addTemplatePart(filePath, done) {
  const relativePath = path.relative('template-parts', filePath).replace(/\\/g, '/').replace('.php', '');
  const getTemplatePartLine = `<?php get_template_part('template-parts/${relativePath}'); ?>`;

  fs.readFile(paths.php.frontPage, 'utf8').then(data => {
    const lines = data.split(/\r?\n/);
    const alreadyExists = lines.some(line => line.trim() === getTemplatePartLine);
    if (alreadyExists) return done();

    // –ù–∞–π—Ç–∏ –≤—Å–µ –∏–º–ø–æ—Ä—Ç—ã —Å–µ–∫—Ü–∏–π –≤–Ω—É—Ç—Ä–∏ <main>
    const mainIndex = lines.findIndex(line => /<main>/i.test(line));
    let insertIndex = mainIndex + 1;
    for (let i = mainIndex + 1; i < lines.length; i++) {
      if (/get_template_part\('template-parts\//.test(lines[i])) {
        insertIndex = i + 1;
      } else if (lines[i].includes('</main>') || lines[i].includes('<?php get_footer(); ?>')) {
        break;
      }
    }
    lines.splice(insertIndex, 0, getTemplatePartLine);
    return fs.writeFile(paths.php.frontPage, lines.join('\n'), 'utf8');
  }).then(() => { console.log(`üì• Template inserted: ${relativePath}`); done(); }).catch(done);
}

function removeTemplatePart(filePath, done) {
  const relativePath = path.relative('template-parts', filePath).replace(/\\/g, '/').replace('.php', '');
  const getTemplatePartLine = `<?php get_template_part('template-parts/${relativePath}'); ?>`;

  fs.readFile(paths.php.frontPage, 'utf8').then(data => {
    const lines = data.split(/\r?\n/);
    const index = lines.findIndex(line => line.trim() === getTemplatePartLine);
    if (index === -1) return done();
    lines.splice(index, 1);
    return fs.writeFile(paths.php.frontPage, lines.join('\n'), 'utf8');
  }).then(() => { console.log(`üóëÔ∏è Template removed: ${relativePath}`); done(); }).catch(done);
}

function createCustomPhpTemplate(filePath, done) {
  const fileName = path.basename(filePath, '.php');
  const templateName = fileName.replace(/-/g, ' ');
  const content = `<?php\n/*\nTemplate name: ${templateName}\n*/\n?>\n<?php get_header(); ?>\n<?php get_template_part('template-parts/hero'); ?>\n<?php get_footer(); ?>`;

  fs.writeFile(filePath, content, 'utf8').then(() => {
    console.log(`üìÑ Created template: ${filePath}`);
    done();
  }).catch(err => { console.error('‚ùå Failed to create PHP template:', err); done(); });
}

export function minifyJs(done) {
  gulp.src(paths.js.src)
    .pipe(plumber(function (err) {
      console.error('JS error:', err.message);
      this.emit('end');
    }))
    .pipe(concat('main.min.js'))
    .pipe(uglify())
    .pipe(gulp.dest(paths.js.dest))
    .on('end', () => { console.log('JS minified.'); done(); });
}

function watchPhpFiles() {
  gulp.watch(paths.php.templateParts, { events: ['add', 'unlink'] })
    .on('add', (filePath) => { console.log(`‚ûï PHP added: ${filePath}`); addTemplatePart(filePath, () => {}); })
    .on('unlink', (filePath) => { console.log(`‚ùå PHP removed: ${filePath}`); removeTemplatePart(filePath, () => {}); });

  gulp.watch(['**/*.php', `!${paths.php.templateParts}`], { events: ['add'] })
    .on('add', (filePath) => { console.log(`üÜï PHP created: ${filePath}`); createCustomPhpTemplate(filePath, () => {}); });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
async function cleanupOldFiles() {
  const filesToDelete = glob.sync('assets/images/*.{jpg,jpeg,png}');
  const bakFilesToDelete = glob.sync('assets/images/*.bak');
  
  if (filesToDelete.length === 0 && bakFilesToDelete.length === 0) {
    return;
  }

  console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤...');
  
  // –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã, –µ—Å–ª–∏ –µ—Å—Ç—å WebP –≤–µ—Ä—Å–∏–∏
  for (const file of filesToDelete) {
    const webpFile = file.replace(/\.(jpg|jpeg|png)$/i, '.webp');
    
    if (await fs.pathExists(webpFile)) {
      try {
        await fs.remove(file);
        console.log(`üóëÔ∏è –£–¥–∞–ª—ë–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª: ${path.basename(file)}`);
      } catch (err) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ - —Ñ–∞–π–ª –≤—Å—ë –µ—â—ë –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
      }
    }
  }

  // –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ —É–¥–∞–ª—è–µ–º –≤—Å–µ .bak —Ñ–∞–π–ª—ã
  for (const bakFile of bakFilesToDelete) {
    const originalName = path.basename(bakFile, '.bak');
    await deleteBakFileAggressively(bakFile, originalName);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
async function convertSingleImage(filePath) {
  try {
    console.log(`üñºÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${path.basename(filePath)}`);
    
    const webpFile = filePath.replace(/\.(jpg|jpeg|png)$/i, '.webp');
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ WebP
    await sharp(filePath)
      .webp({ quality: 90, effort: 4 })
      .toFile(webpFile);
    
    console.log(`‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${path.basename(filePath)} ‚Üí ${path.basename(webpFile)}`);
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
    setTimeout(async () => {
      await forceDeleteFile(filePath);
    }, 1000);
    
  } catch (err) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ ${filePath}:`, err.message);
  }
}

// –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –¥–ª—è Windows
async function forceDeleteFile(filePath) {
  const fileName = path.basename(filePath);
  
  try {
    // –ú–µ—Ç–æ–¥ 1: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
    await fs.remove(filePath);
    console.log(`üóëÔ∏è –û—Ä–∏–≥–∏–Ω–∞–ª —É–¥–∞–ª—ë–Ω: ${fileName}`);
    console.log(`üéâ –ì–æ—Ç–æ–≤–æ! –û—Å—Ç–∞–ª—Å—è —Ç–æ–ª—å–∫–æ WebP —Ñ–∞–π–ª`);
    return;
  } catch (err1) {
    console.log(`‚ö†Ô∏è –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –ø—Ä–æ–±—É—é –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ...`);
  }

  try {
    // –ú–µ—Ç–æ–¥ 2: –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –≤ .bak (–æ–±—Ö–æ–¥–∏—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏)
    const bakFile = filePath + '.bak';
    await fs.move(filePath, bakFile);
    console.log(`üì¶ –û—Ä–∏–≥–∏–Ω–∞–ª –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤ .bak: ${fileName}`);
    
    // –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ .bak —Ñ–∞–π–ª–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
    setTimeout(async () => {
      await deleteBakFileAggressively(bakFile, fileName);
    }, 3000); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–æ 3 —Å–µ–∫—É–Ω–¥
    return;
  } catch (err2) {
    console.log(`‚ö†Ô∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –ø—Ä–æ–±—É—é –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã...`);
  }

  try {
    // –ú–µ—Ç–æ–¥ 3: –°–Ω–∏–º–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è
    await execAsync(`attrib -R "${filePath}"`);
    await fs.remove(filePath);
    console.log(`üóëÔ∏è –û—Ä–∏–≥–∏–Ω–∞–ª —É–¥–∞–ª—ë–Ω (–ø–æ—Å–ª–µ —Å–Ω—è—Ç–∏—è –∞—Ç—Ä–∏–±—É—Ç–æ–≤): ${fileName}`);
    console.log(`üéâ –ì–æ—Ç–æ–≤–æ! –û—Å—Ç–∞–ª—Å—è —Ç–æ–ª—å–∫–æ WebP —Ñ–∞–π–ª`);
    return;
  } catch (err3) {
    console.log(`‚ö†Ô∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å attrib –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –ø—Ä–æ–±—É—é del...`);
  }

  try {
    // –ú–µ—Ç–æ–¥ 4: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ del
    await execAsync(`del /f /q "${filePath}"`);
    console.log(`üóëÔ∏è –û—Ä–∏–≥–∏–Ω–∞–ª —É–¥–∞–ª—ë–Ω (—á–µ—Ä–µ–∑ del): ${fileName}`);
    console.log(`üéâ –ì–æ—Ç–æ–≤–æ! –û—Å—Ç–∞–ª—Å—è —Ç–æ–ª—å–∫–æ WebP —Ñ–∞–π–ª`);
    return;
  } catch (err4) {
    console.log(`‚ö†Ô∏è Del –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É—é PowerShell...`);
  }

  try {
    // –ú–µ—Ç–æ–¥ 5: PowerShell –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
    await execAsync(`powershell -Command "Remove-Item '${filePath}' -Force"`);
    console.log(`üóëÔ∏è –û—Ä–∏–≥–∏–Ω–∞–ª —É–¥–∞–ª—ë–Ω (—á–µ—Ä–µ–∑ PowerShell): ${fileName}`);
    console.log(`üéâ –ì–æ—Ç–æ–≤–æ! –û—Å—Ç–∞–ª—Å—è —Ç–æ–ª—å–∫–æ WebP —Ñ–∞–π–ª`);
    return;
  } catch (err5) {
    console.warn(`‚ùå –í—Å–µ –º–µ—Ç–æ–¥—ã —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏ –¥–ª—è ${fileName}`);
    console.log(`üí° –§–∞–π–ª –±—É–¥–µ—Ç —É–¥–∞–ª—ë–Ω –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—É—Å–∫–µ —Å–∏—Å—Ç–µ–º—ã`);
    console.log(`üîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å PowerShell –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞`);
  }
}

// –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è .bak —Ñ–∞–π–ª–æ–≤
async function deleteBakFileAggressively(bakFile, originalFileName) {
  const bakFileName = path.basename(bakFile);
  
  // –ü–æ–ø—ã—Ç–∫–∞ 1: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
  try {
    await fs.remove(bakFile);
    console.log(`üóëÔ∏è .bak —Ñ–∞–π–ª —É–¥–∞–ª—ë–Ω: ${bakFileName}`);
    console.log(`üéâ –ì–æ—Ç–æ–≤–æ! –û—Å—Ç–∞–ª—Å—è —Ç–æ–ª—å–∫–æ WebP —Ñ–∞–π–ª`);
    return;
  } catch (err1) {
    console.log(`‚ö†Ô∏è –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ .bak –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –ø—Ä–æ–±—É—é –¥—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã...`);
  }

  // –ü–æ–ø—ã—Ç–∫–∞ 2: –°–Ω—è—Ç–∏–µ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –∏ —É–¥–∞–ª–µ–Ω–∏–µ
  try {
    await execAsync(`attrib -R -H -S "${bakFile}"`);
    await fs.remove(bakFile);
    console.log(`üóëÔ∏è .bak —Ñ–∞–π–ª —É–¥–∞–ª—ë–Ω (–ø–æ—Å–ª–µ —Å–Ω—è—Ç–∏—è –∞—Ç—Ä–∏–±—É—Ç–æ–≤): ${bakFileName}`);
    console.log(`üéâ –ì–æ—Ç–æ–≤–æ! –û—Å—Ç–∞–ª—Å—è —Ç–æ–ª—å–∫–æ WebP —Ñ–∞–π–ª`);
    return;
  } catch (err2) {
    console.log(`‚ö†Ô∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å attrib –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ...`);
  }

  // –ü–æ–ø—ã—Ç–∫–∞ 3: –ö–æ–º–∞–Ω–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ del
  try {
    await execAsync(`del /f /q /a "${bakFile}"`);
    console.log(`üóëÔ∏è .bak —Ñ–∞–π–ª —É–¥–∞–ª—ë–Ω (—á–µ—Ä–µ–∑ del): ${bakFileName}`);
    console.log(`üéâ –ì–æ—Ç–æ–≤–æ! –û—Å—Ç–∞–ª—Å—è —Ç–æ–ª—å–∫–æ WebP —Ñ–∞–π–ª`);
    return;
  } catch (err3) {
    console.log(`‚ö†Ô∏è Del –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞...`);
  }

  // –ü–æ–ø—ã—Ç–∫–∞ 4: PowerShell –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
  try {
    await execAsync(`powershell -Command "Remove-Item '${bakFile}' -Force -ErrorAction SilentlyContinue"`);
    console.log(`üóëÔ∏è .bak —Ñ–∞–π–ª —É–¥–∞–ª—ë–Ω (—á–µ—Ä–µ–∑ PowerShell): ${bakFileName}`);
    console.log(`üéâ –ì–æ—Ç–æ–≤–æ! –û—Å—Ç–∞–ª—Å—è —Ç–æ–ª—å–∫–æ WebP —Ñ–∞–π–ª`);
    return;
  } catch (err4) {
    console.log(`‚ö†Ô∏è PowerShell –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª...`);
  }

  // –ü–æ–ø—ã—Ç–∫–∞ 5: –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –≤ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏ —É–¥–∞–ª–µ–Ω–∏–µ
  try {
    const tempFile = bakFile + '.tmp';
    await fs.move(bakFile, tempFile);
    await fs.remove(tempFile);
    console.log(`üóëÔ∏è .bak —Ñ–∞–π–ª —É–¥–∞–ª—ë–Ω (—á–µ—Ä–µ–∑ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ): ${bakFileName}`);
    console.log(`üéâ –ì–æ—Ç–æ–≤–æ! –û—Å—Ç–∞–ª—Å—è —Ç–æ–ª—å–∫–æ WebP —Ñ–∞–π–ª`);
    return;
  } catch (err5) {
    console.log(`‚ö†Ô∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ...`);
  }

  // –ü–æ–ø—ã—Ç–∫–∞ 6: –ó–∞–ø–∏—Å—å –ø—É—Å—Ç–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∏ —É–¥–∞–ª–µ–Ω–∏–µ
  try {
    await fs.writeFile(bakFile, '');
    await fs.remove(bakFile);
    console.log(`üóëÔ∏è .bak —Ñ–∞–π–ª —É–¥–∞–ª—ë–Ω (—á–µ—Ä–µ–∑ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å): ${bakFileName}`);
    console.log(`üéâ –ì–æ—Ç–æ–≤–æ! –û—Å—Ç–∞–ª—Å—è —Ç–æ–ª—å–∫–æ WebP —Ñ–∞–π–ª`);
    return;
  } catch (err6) {
    console.log(`‚ö†Ô∏è –ü–µ—Ä–µ–∑–∞–ø–∏—Å—å –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞...`);
  }

  // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ
  console.warn(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å .bak —Ñ–∞–π–ª: ${bakFileName}`);
  console.log(`üíæ –§–∞–π–ª ${bakFileName} —Å–æ—Ö—Ä–∞–Ω—ë–Ω –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è`);
  console.log(`üí° WebP —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ, –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å .bak –≤—Ä—É—á–Ω—É—é`);
}

export function convertToWebp(done) {
  // –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã
  cleanupOldFiles().then(() => {
    const originalFiles = glob.sync(paths.images.src);
    
    if (originalFiles.length === 0) {
      console.log('üñºÔ∏è –ù–µ—Ç –∫–∞—Ä—Ç–∏–Ω–æ–∫ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏');
      return done();
    }

    console.log(`üñºÔ∏è –ù–∞–π–¥–µ–Ω–æ ${originalFiles.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏`);

    let processed = 0;
    const total = originalFiles.length;

    originalFiles.forEach(async (file) => {
      await convertSingleImage(file);
      
      processed++;
      if (processed === total) {
        console.log('üñºÔ∏è –í—Å–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!');
        done();
      }
    });
  });
}

export const watchFiles = gulp.series(
  gulp.parallel(compileScss, minifyJs),
  () => {
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    cleanupOldFiles();
    
    console.log('üëÄ –ù–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ —Ñ–∞–π–ª–∞–º–∏ –∑–∞–ø—É—â–µ–Ω–æ...');
    console.log('üñºÔ∏è –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∞–∫—Ç–∏–≤–Ω–∞!');
    
    // SCSS —Ñ–∞–π–ª—ã
    gulp.watch(paths.scss.src, gulp.series(compileScss))
      .on('add', (filePath) => { console.log(`üÜï SCSS created: ${filePath}`); addMixinsAndVariablesToScssFiles(filePath, () => updateMainScss(() => compileScss(() => {}))); })
      .on('unlink', (filePath) => { console.log(`üóëÔ∏è SCSS deleted: ${filePath}`); updateMainScss(() => compileScss(() => {})); });

    // JS —Ñ–∞–π–ª—ã  
    gulp.watch(paths.js.src, gulp.series(minifyJs))
      .on('add', (filePath) => console.log(`üÜï JS created: ${filePath}`))
      .on('unlink', (filePath) => console.log(`üóëÔ∏è JS deleted: ${filePath}`));

    // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - –ú–ì–ù–û–í–ï–ù–ù–ê–Ø –ö–û–ù–í–ï–†–¢–ê–¶–ò–Ø!
    gulp.watch(paths.images.src, { events: ['add'] })
      .on('add', (filePath) => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ WebP —Ñ–∞–π–ª
        if (!filePath.match(/\.webp$/i)) {
          convertSingleImage(filePath);
        }
      });

    // PHP —Ñ–∞–π–ª—ã
    gulp.watch(paths.php.templateParts, { events: ['add', 'unlink'] })
      .on('add', (filePath) => { console.log(`üÜï PHP created: ${filePath}`); addTemplatePart(filePath, () => {}); })
      .on('unlink', (filePath) => { console.log(`üóëÔ∏è PHP deleted: ${filePath}`); removeTemplatePart(filePath, () => {}); });

    // –û—Ç–¥–µ–ª—å–Ω—ã–π watch –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö PHP —à–∞–±–ª–æ–Ω–æ–≤
    gulp.watch(['**/*.php', `!${paths.php.templateParts}`], { events: ['add'] })
      .on('add', (filePath) => { console.log(`üÜï PHP created: ${filePath}`); createCustomPhpTemplate(filePath, () => {}); });
  }
);

export function zipProject(done) {
  fs.readFile('style.css', 'utf8').then(data => {
    const match = data.match(/Theme Name:\s*(.+)/i);
    const projectName = match ? match[1].trim() : 'project';
    return import('gulp-zip').then(({ default: zip }) => {
      return gulp.src([
        '**/*',
        '!node_modules/**',
        '!assets/scss/**',
        '!gulpfile.*',
        '!assets/css/main.css',
        '!assets/js/!(*.min).js', // –∏—Å–∫–ª—é—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –ù–ï-–º–∏–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
        '!package*.json'
      ], { base: '.' })
        .pipe(zip(`${projectName}.zip`))
        .pipe(gulp.dest('C:/Users/Bohdan stepanenko/Desktop'));
    });
  }).then(() => {
    console.log('üì¶ –ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —É–ø–∞–∫–æ–≤–∞–Ω –≤ zip.');
    done();
  }).catch(err => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—Ä—Ö–∏–≤–∞:', err);
    done(err);
  });
}

export default gulp.series(updateMainScss, compileScss, minifyJs, watchFiles);
export const build = gulp.series(updateMainScss, compileScss, minifyJs);